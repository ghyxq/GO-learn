
-------------------------defer------------------------------------------------------------------------
1.defer语句，延迟函数的执行，当函数要返回的时候在执行对应的语句
    demo：
          defer fmt.Println("the last sentence")

    注意：
        func printnum(){
            for i:=0;i<5;i++{
                defer func(){
                  fmt.Println(i)
                 }()//注意这里，这里需要一个括号，匿名函数，并且没有传入参数，则使用的i则是最后的i
             }
         }
-----> 结果是：55555


         func printnum(){
                     for i:=0;i<5;i++{
                         defer func(){
                           fmt.Println(i)
                          }(i)//这里传入了参数，每次defer把对应的表达式压入栈中的时候会先计算出入参，然后在压入
                      }
                  }
----->  结果是：43210



        func printnum(){
                      for i:=0;i<5;i++{
                                 defer func(){
                                   fmt.Println(i)
                                  }(i*2)//这里传入了参数，每次defer把对应的表达式压入栈中的时候会先计算出入参，然后在压入
                              }
                          }
----->   结果是：86420


-------------------------panic--------------recover------------------------------------------------------------------------
2.panic一般需要使用recover进行捕获，就像是系统发生运行时异常需要不过一样，
   **panic：
         这个异常发生的时候会沿着调用栈反向进行传播，直到顶层，如果要捕获就需要使用recover
   **recover：
          捕获异常，一般配合defer使用


    经常使用的方式如下：

    func test() (err error){
        defer func(){   //这个函数最后运行，如果程序奔溃，可以在这里进行捕获判断处理
            if e := recover();e!=nil{  //入股e不是nil，则发生panic，根据e携带的类型进行具体处理
                if se,ok := e.(scanError);ok{  //这里判断e是否是具体的类型是不是scanError
                    err = se.err  //如果是的话，则直接将错误信息赋值给返回值err
                }else{
                  panic(e)        //如果不是该具体类型，则继续panic

                }
            }
        }()
    }


